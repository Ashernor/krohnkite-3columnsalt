// Copyright (c) 2018-2019 Eon S. Jeon <esjeon@hyunmu.am>
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

// API Reference:
//     https://techbase.kde.org/Development/Tutorials/KWin/Scripting/API_4.9

declare namespace KWinNS {
  /* enum ClientAreaOption */
  interface Api {
    workspace: IWorkspaceWrapper;
    options: IOptions;
    kwin: KWin;
  }
  enum ClientAreaOption {
    PlacementArea,
    MovementArea,
    MaximizeArea,
    MaximizeFullArea,
    FullScreenArea,
    WorkArea,
    FullArea,
    ScreenArea,
  }
  enum SizeMode {
    SizeModeAny,
    SizeModeFixedW,
    SizeModeFixedH,
    SizeModeMax,
  }
  interface KWin {
    PlacementArea: number;
    readConfig(key: string, defaultValue?: any): any;
  }

  interface IWorkspaceWrapper {
    readonly desktops: IOutput[];
    readonly desktopGridSize: QSize;
    readonly desktopGridWidth: number;
    readonly desktopGridHeight: number;
    readonly workspaceWidth: number;
    readonly workspaceHeight: number;
    readonly workspaceSize: QSize;
    readonly activeScreen: IOutput;
    readonly screens: IOutput[];
    readonly activities: string[];
    readonly virtualScreenSize: QSize;
    readonly virtualScreenGeometry: QRect;
    readonly stackingOrder: IWindow[];
    readonly cursorPos: QPoint;
    // read-write props
    currentDesktop: IVirtualDesktop;
    activeWindow: IWindow;
    currentActivity: string;
    // signals
    windowAdded: QSignal; // (window: IWindow)
    windowRemoved: QSignal; // (window: IWindow
    windowActivated: QSignal; // (window: IWindow)
    desktopsChanged: QSignal;
    desktopLayoutChanged: QSignal;
    screensChanged: QSignal;
    currentActivityChanged: QSignal; // (activity new. const id: string)
    activitiesChanged: QSignal; // (activity new. const id: string)
    activityAdded: QSignal; // (activity new. const id: string)
    activityRemoved: QSignal; // (activity new. const id: string)
    virtualScreenSizeChanged: QSignal;
    virtualScreenGeometryChanged: QSignal;
    currentDesktopChanged: QSignal; // (desktop: IVirtualDesktop)
    cursorPosChanged: QSignal;
    // functions
    sendClientToScreen(client: IWindow, output: IOutput): void;
    showOutline(geometry: QRect): void;
    showOutline(x: number, y: number, width: number, height: number): void;
    hideOutline(): void;
    screenAt(pos: QPoint): IOutput;
    clientArea(
      option: ClientAreaOption,
      output: IOutput,
      desktop: IVirtualDesktop
    ): QRect;
    clientArea(option: ClientAreaOption, window: IWindow): QRect;
    createDesktop(position: number, name: string): void;
    removeDesktop(desktop: IVirtualDesktop): void;
    supportInformation(): string;
    raiseWindow(window: IWindow): void;
    getClient(windowId: number): IWindow;
    windowAt(pos: QPoint, count: number): IWindow[];
    isEffectActive(pluginId: string): boolean;
  }
  interface IVirtualDesktop {
    readonly id: string;
    readonly x11DesktopNumber: number;
    name: string;
    nameChanged(): QSignal;
    aboutToBeDestroyed(): QSignal;
  }
  interface IOutput {
    readonly geometry: QRect;
    readonly devicePixelRatio: number;
    readonly name: string;
    readonly manufacturer: string;
    readonly model: string;
    readonly serialNumber: string;

    geometryChanged: QSignal;
    enabledChanged: QSignal;
    scaleChanged: QSignal;
    aboutToTurnOff: QSignal; // (time: number)
    wakeUp: QSignal;
    aboutToChange: QSignal; //

    mapToGlobal(pos: QPoint): QPoint;
    mapFromGlobal(pos: QPoint): QPoint;
  }
  interface IOptions {
    configChanged: QSignal;
  }
  interface IWindow {
    readonly bufferGeometry: QRect;
    readonly clientGeometry: QRect;
    readonly pos: QPoint;
    readonly size: QSize;
    readonly x: number;
    readonly y: number;
    readonly width: number;
    readonly height: number;
    readonly output: IOutput;
    readonly rect: QRect;
    readonly resourceName: string;
    readonly resourceClass: string;
    readonly windowRole: string;
    readonly desktopWindow: boolean;
    readonly dock: boolean;
    readonly toolbar: boolean;
    readonly menu: boolean;
    readonly normalWindow: boolean;
    readonly dialog: boolean;
    readonly splash: boolean;
    readonly utility: boolean;
    readonly dropdownMenu: boolean;
    readonly popupMenu: boolean;
    readonly tooltip: boolean;
    readonly notification: boolean;
    readonly criticalNotification: boolean;
    readonly appletPopup: boolean;
    readonly onScreenDisplay: boolean;
    readonly comboBox: boolean;
    readonly dndIcon: boolean;
    readonly windowType: number;
    readonly managed: boolean;
    readonly deleted: boolean;
    readonly popupWindow: boolean;
    readonly outline: boolean;
    readonly internalId: QUuid;
    readonly pid: number;
    readonly stackingOrder: number;
    readonly fullScreenable: boolean;
    readonly active: boolean;
    readonly closeable: boolean;
    readonly shadeable: boolean;
    readonly minimizable: boolean;
    readonly iconGeometry: QRect;
    readonly specialWindow: boolean;
    readonly caption: string;
    readonly minSize: QSize;
    readonly maxSize: QSize;
    readonly transient: boolean;
    readonly transientFor: IWindow;
    readonly modal: boolean;
    readonly move: boolean;
    readonly resize: boolean;
    readonly decorationHasAlpha: boolean;
    readonly providesContextHelp: boolean;
    readonly maximizable: boolean;
    readonly moveable: boolean;
    readonly moveableAcrossScreens: boolean;
    readonly resizeable: boolean;
    readonly desktopFileName: string;
    readonly hasApplicationMenu: boolean;
    readonly applicationMenuActive: boolean;
    readonly unresponsive: boolean;
    readonly colorScheme: string;
    readonly hidden: boolean;
    readonly inputMethod: boolean;

    opacity: number;
    skipsCloseAnimation: boolean;
    fullScreen: boolean;
    desktops: IVirtualDesktop[];
    onAllDesktops: boolean;
    activities: string[];
    skipTaskbar: boolean;
    skipPager: boolean;
    skipSwitcher: boolean;
    keepAbove: boolean;
    keepBelow: boolean;
    shade: boolean;
    minimized: boolean;
    demandsAttention: boolean;
    frameGeometry: QRect;
    noBorder: boolean;
    tile: ITile;

    // Signals
    stackingOrderChanged: QSignal;
    shadeChanged: QSignal;
    opacityChanged: QSignal;
    damaged: QSignal;
    inputTransformationChanged: QSignal;
    closed: QSignal;
    windowShown: QSignal;
    windowHidden: QSignal;
    outputChanged: QSignal;
    skipCloseAnimationChanged: QSignal;
    windowRoleChanged: QSignal;
    windowClassChanged: QSignal;
    surfaceChanged: QSignal;
    shadowChanged: QSignal;
    bufferGeometryChanged: QSignal;
    frameGeometryChanged: QSignal;
    clientGeometryChanged: QSignal;
    frameGeometryAboutToChange: QSignal;
    visibleGeometryChanged: QSignal;
    tileChanged: QSignal;
    fullScreenChanged: QSignal;
    skipTaskbarChanged: QSignal;
    skipPagerChanged: QSignal;
    skipSwitcherChanged: QSignal;
    iconChanged: QSignal;
    activeChanged: QSignal;
    keepAboveChanged: QSignal;
    keepBelowChanged: QSignal;
    demandsAttentionChanged: QSignal;
    desktopsChanged: QSignal;
    activitiesChanged: QSignal;
    minimizedChanged: QSignal;
    paletteChanged: QSignal;
    colorSchemeChanged: QSignal;
    captionChanged: QSignal;
    captionNormalChanged: QSignal;
    maximizedAboutToChange: QSignal;
    maximizedChanged: QSignal;
    transientChanged: QSignal;
    modalChanged: QSignal;
    quickTileModeChanged: QSignal;
    moveResizedChanged: QSignal;
    moveResizeCursorChanged: QSignal;
    interactiveMoveResizeStarted: QSignal;
    interactiveMoveResizeStepped: QSignal;
    interactiveMoveResizeFinished: QSignal;
    closeableChanged: QSignal;
    minimizeableChanged: QSignal;
    shadeableChanged: QSignal;
    maximizeableChanged: QSignal;
    desktopFileNameChanged: QSignal;
    applicationMenuChanged: QSignal;
    hasApplicationMenuChanged: QSignal;
    applicationMenuActiveChanged: QSignal;
    unresponsiveChanged: QSignal;
    decorationChanged: QSignal;
    hiddenChanged: QSignal;
    hiddenByShowDesktopChanged: QSignal;
    lockScreenOverlayChanged: QSignal;
    readyForPaintingChanged: QSignal;
    maximizeGeometryRestoreChanged: QSignal;
    fullscreenGeometryRestoreChanged: QSignal;

    // functions
    closeWindow(): void;
    setMaximize(vertically: boolean, horizontally: boolean): void;
  }
  interface ITileManager {
    readonly rootTile: ITile;

    tileRemoved: QSignal;

    bestTileForPosition(x: number, y: number): ITile;
  }

  interface ITile {
    readonly absoluteGeometry: QRect;
    readonly absoluteGeometryInScreen: QRect;
    readonly positionInLayout: number;
    readonly parent: ITile;
    readonly tiles: ITile[];
    readonly windows: IWindow[];
    readonly isLayout: boolean;
    readonly canBeRemoved: boolean;
  }
}
